{"version":3,"file":"convertToJson.js","names":["parseDate","Integer","isInteger","URL","isURL","Email","isEmail","DEFAULT_OPTIONS","isColumnOriented","data","schema","options","rowMap","validateSchema","transpose","columns","results","errors","i","length","result","read","push","error","row","rows","rowIndex","object","isEmptyObject","key","schemaEntry","isNestedSchema","type","Array","isArray","rawValue","indexOf","undefined","value","reason","notEmpty","array","parseArray","map","_value","parseValue","required","column","includeNullValues","prop","Object","keys","parse","parseCustomValue","parseValueOfType","oneOf","validate","message","String","isFinite","Number","stringifiedValue","Date","isNaN","date","properties","Boolean","Error","name","getBlock","string","endCharacter","startIndex","substring","character","block","blocks","index","trim","_","entry"],"sources":["../../../source/read/schema/convertToJson.js"],"sourcesContent":["import parseDate from '../parseDate.js'\r\n\r\nimport Integer, { isInteger } from '../../types/Integer.js'\r\nimport URL, { isURL } from '../../types/URL.js'\r\nimport Email, { isEmail } from '../../types/Email.js'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  isColumnOriented: false\r\n}\r\n\r\n/**\r\n * Convert 2D array to nested objects.\r\n * If row oriented data, row 0 is dotted key names.\r\n * Column oriented data is transposed.\r\n * @param {any[][]} data - An array of rows, each row being an array of cells.\r\n * @param {object} schema\r\n * @return {object[]}\r\n */\r\nexport default function(data, schema, options) {\r\n  if (options) {\r\n    options = {\r\n      ...DEFAULT_OPTIONS,\r\n      ...options\r\n    }\r\n  } else {\r\n    options = DEFAULT_OPTIONS\r\n  }\r\n\r\n  const {\r\n    isColumnOriented,\r\n    rowMap\r\n  } = options\r\n\r\n  validateSchema(schema)\r\n\r\n  if (isColumnOriented) {\r\n    data = transpose(data)\r\n  }\r\n\r\n  const columns = data[0]\r\n\r\n  const results = []\r\n  const errors = []\r\n\r\n  for (let i = 1; i < data.length; i++) {\r\n    const result = read(schema, data[i], i - 1, columns, errors, options)\r\n    if (result) {\r\n      results.push(result)\r\n    }\r\n  }\r\n\r\n  // Correct error rows.\r\n  if (rowMap) {\r\n    for (const error of errors) {\r\n      // Convert the `row` index in `data` to the\r\n      // actual `row` index in the spreadsheet.\r\n      // The `1` compensates for the header row.\r\n      error.row = rowMap[error.row] + 1\r\n    }\r\n  }\r\n\r\n  return {\r\n    rows: results,\r\n    errors\r\n  }\r\n}\r\n\r\nfunction read(schema, row, rowIndex, columns, errors, options) {\r\n  const object = {}\r\n  let isEmptyObject = true\r\n  for (const key of Object.keys(schema)) {\r\n    const schemaEntry = schema[key]\r\n    const isNestedSchema = typeof schemaEntry.type === 'object' && !Array.isArray(schemaEntry.type)\r\n    let rawValue = row[columns.indexOf(key)]\r\n    if (rawValue === undefined) {\r\n      rawValue = null\r\n    }\r\n    let value\r\n    let error\r\n    let reason\r\n    if (isNestedSchema) {\r\n      value = read(schemaEntry.type, row, rowIndex, columns, errors, options)\r\n    } else {\r\n      if (rawValue === null) {\r\n        value = null\r\n      }\r\n      else if (Array.isArray(schemaEntry.type)) {\r\n        let notEmpty = false\r\n        const array = parseArray(rawValue).map((_value) => {\r\n          const result = parseValue(_value, schemaEntry, options)\r\n          if (result.error) {\r\n            value = _value\r\n            error = result.error\r\n            reason = result.reason\r\n          }\r\n          if (result.value !== null) {\r\n            notEmpty = true\r\n          }\r\n          return result.value\r\n        })\r\n        if (!error) {\r\n          value = notEmpty ? array : null\r\n        }\r\n      } else {\r\n        const result = parseValue(rawValue, schemaEntry, options)\r\n        error = result.error\r\n        reason = result.reason\r\n        value = error ? rawValue : result.value\r\n      }\r\n    }\r\n    if (!error && value === null && schemaEntry.required) {\r\n      error = 'required'\r\n    }\r\n    if (error) {\r\n      error = {\r\n        error,\r\n        row: rowIndex + 1,\r\n        column: key,\r\n        value\r\n      }\r\n      if (reason) {\r\n        error.reason = reason\r\n      }\r\n      if (schemaEntry.type) {\r\n        error.type = schemaEntry.type\r\n      }\r\n      errors.push(error)\r\n    } else {\r\n      if (isEmptyObject && value !== null) {\r\n        isEmptyObject = false\r\n      }\r\n      if (value !== null || options.includeNullValues) {\r\n        object[schemaEntry.prop] = value\r\n      }\r\n    }\r\n  }\r\n  if (isEmptyObject) {\r\n    return null\r\n  }\r\n  return object\r\n}\r\n\r\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {object} schemaEntry\r\n * @return {{ value: any, error: string }}\r\n */\r\nexport function parseValue(value, schemaEntry, options) {\r\n  if (value === null) {\r\n    return { value: null }\r\n  }\r\n  let result\r\n  if (schemaEntry.parse) {\r\n    result = parseCustomValue(value, schemaEntry.parse)\r\n  } else if (schemaEntry.type) {\r\n    result = parseValueOfType(\r\n      value,\r\n      // Supports parsing array types.\r\n      // See `parseArray()` function for more details.\r\n      // Example `type`: String[]\r\n      // Input: 'Barack Obama, \"String, with, colons\", Donald Trump'\r\n      // Output: ['Barack Obama', 'String, with, colons', 'Donald Trump']\r\n      Array.isArray(schemaEntry.type) ? schemaEntry.type[0] : schemaEntry.type,\r\n      options\r\n    )\r\n  } else {\r\n    result = { value: value }\r\n    // throw new Error('Invalid schema entry: no .type and no .parse():\\n\\n' + JSON.stringify(schemaEntry, null, 2))\r\n  }\r\n  // If errored then return the error.\r\n  if (result.error) {\r\n    return result\r\n  }\r\n  if (result.value !== null) {\r\n    if (schemaEntry.oneOf && schemaEntry.oneOf.indexOf(result.value) < 0) {\r\n      return { error: 'invalid', reason: 'unknown' }\r\n    }\r\n    if (schemaEntry.validate) {\r\n      try {\r\n        schemaEntry.validate(result.value)\r\n      } catch (error) {\r\n        return { error: error.message }\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Converts textual value to a custom value using supplied `.parse()`.\r\n * @param  {any} value\r\n * @param  {function} parse\r\n * @return {{ value: any, error: string }}\r\n */\r\nfunction parseCustomValue(value, parse) {\r\n  try {\r\n    value = parse(value)\r\n    if (value === undefined) {\r\n      return { value: null }\r\n    }\r\n    return { value }\r\n  } catch (error) {\r\n    return { error: error.message }\r\n  }\r\n}\r\n\r\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {} type\r\n * @return {{ value: (string|number|Date|boolean), error: string, reason?: string }}\r\n */\r\nfunction parseValueOfType(value, type, options) {\r\n  switch (type) {\r\n    case String:\r\n      if (typeof value === 'string') {\r\n        return { value }\r\n      }\r\n      // Excel tends to perform a forced automatic convertion of string-type values\r\n      // to number-type ones when the user has input them. Otherwise, users wouldn't\r\n      // be able to perform formula calculations on those cell values because users\r\n      // won't bother manually choosing a \"numeric\" cell type for each cell, and\r\n      // even if they did, choosing a \"numeric\" cell type every time wouldn't be an\r\n      // acceptable \"user experience\".\r\n      //\r\n      // So, if a cell value is supposed to be a string and Excel has automatically\r\n      // converted it to a number, perform a backwards conversion.\r\n      //\r\n      if (typeof value === 'number') {\r\n        // The global `isFinite()` function filters out:\r\n        // * NaN\r\n        // * -Infinity\r\n        // * Infinity\r\n        //\r\n        // All other values pass (including non-numbers).\r\n        //\r\n        if (isFinite(value)) {\r\n          return { value: String(value) }\r\n        }\r\n        return { error: 'invalid', reason: 'not_a_number' }\r\n      }\r\n      return { error: 'invalid', reason: 'not_a_string' }\r\n\r\n    case Number:\r\n    case Integer:\r\n      // An XLSX file editing software might not always correctly\r\n      // detect numeric values in string-type cells. Users won't bother\r\n      // manually selecting a cell type, so the editing software has to guess\r\n      // based on the user's input. One can assume that such auto-detection\r\n      // might not always work.\r\n      //\r\n      // So, if a cell is supposed to be a numeric one, convert a string value to a number.\r\n      //\r\n      if (typeof value === 'string') {\r\n        const stringifiedValue = value\r\n        value = Number(value)\r\n        if (String(value) !== stringifiedValue) {\r\n          return { error: 'invalid', reason: 'not_a_number_string' }\r\n        }\r\n      } else if (typeof value !== 'number') {\r\n        return { error: 'invalid', reason: 'not_a_number' }\r\n      }\r\n      // At this point, `value` can only be a number.\r\n      //\r\n      // The global `isFinite()` function filters out:\r\n      // * NaN\r\n      // * -Infinity\r\n      // * Infinity\r\n      //\r\n      // All other values pass (including non-numbers).\r\n      //\r\n      if (!isFinite(value)) {\r\n        return { error: 'invalid', reason: 'not_a_number' }\r\n      }\r\n      if (type === Integer && !isInteger(value)) {\r\n        return { error: 'invalid', reason: 'not_an_integer' }\r\n      }\r\n      return { value }\r\n\r\n    case URL:\r\n      if (typeof value === 'string') {\r\n        if (isURL(value)) {\r\n          return { value }\r\n        }\r\n        return { error: 'invalid', reason: 'not_a_url' }\r\n      }\r\n      return { error: 'invalid', reason: 'not_a_string' }\r\n\r\n    case Email:\r\n      if (typeof value === 'string') {\r\n        if (isEmail(value)) {\r\n          return { value }\r\n        }\r\n        return { error: 'invalid', reason: 'not_an_email' }\r\n      }\r\n      return { error: 'invalid', reason: 'not_a_string' }\r\n\r\n    case Date:\r\n      // XLSX has no specific format for dates.\r\n      // Sometimes a date can be heuristically detected.\r\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\r\n      if (value instanceof Date) {\r\n        if (isNaN(value)) {\r\n          return { error: 'invalid', reason: 'out_of_bounds' }\r\n        }\r\n        return { value }\r\n      }\r\n      if (typeof value === 'number') {\r\n        if (!isFinite(value)) {\r\n          return { error: 'invalid', reason: 'not_a_number' }\r\n        }\r\n        value = Number(value)\r\n        const date = parseDate(value, options.properties)\r\n        if (isNaN(date)) {\r\n          return { error: 'invalid', reason: 'out_of_bounds' }\r\n        }\r\n        return { value: date }\r\n      }\r\n      return { error: 'invalid', reason: 'not_a_number' }\r\n\r\n    case Boolean:\r\n      if (typeof value === 'boolean') {\r\n        return { value }\r\n      }\r\n      return { error: 'invalid', reason: 'not_a_boolean' }\r\n\r\n    default:\r\n      if (typeof type === 'function') {\r\n        return parseCustomValue(value, type)\r\n      }\r\n      throw new Error(`Unknown schema type: ${type && type.name || type}`)\r\n  }\r\n}\r\n\r\nexport function getBlock(string, endCharacter, startIndex) {\r\n  let i = 0\r\n  let substring = ''\r\n  let character\r\n  while (startIndex + i < string.length) {\r\n    const character = string[startIndex + i]\r\n    if (character === endCharacter) {\r\n      return [substring, i]\r\n    }\r\n    else if (character === '\"') {\r\n      const block = getBlock(string, '\"', startIndex + i + 1)\r\n      substring += block[0]\r\n      i += '\"'.length + block[1] + '\"'.length\r\n    }\r\n    else {\r\n      substring += character\r\n      i++\r\n    }\r\n  }\r\n  return [substring, i]\r\n}\r\n\r\n/**\r\n * Parses a string of comma-separated substrings into an array of substrings.\r\n * (the `export` is just for tests)\r\n * @param  {string} string — A string of comma-separated substrings.\r\n * @return {string[]} An array of substrings.\r\n */\r\nexport function parseArray(string) {\r\n  const blocks = []\r\n  let index = 0\r\n  while (index < string.length) {\r\n    const [substring, length] = getBlock(string, ',', index)\r\n    index += length + ','.length\r\n    blocks.push(substring.trim())\r\n  }\r\n  return blocks\r\n}\r\n\r\n// Transpose a 2D array.\r\n// https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript\r\nconst transpose = array => array[0].map((_, i) => array.map(row => row[i]))\r\n\r\nfunction validateSchema(schema) {\r\n  for (const key of Object.keys(schema)) {\r\n    const entry = schema[key]\r\n    if (!entry.prop) {\r\n      throw new Error(`\"prop\" not defined for schema entry \"${key}\".`)\r\n    }\r\n  }\r\n}"],"mappings":"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"}